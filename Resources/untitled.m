clear
clc

building = "BOELER";
floor = 7;
term = "22W";

t = tree('Classroom');
%Read the data
importedData = readlines('GridSearch.txt');

[newtree,floorMatrix] = buildTree(importedData,t);
disp(newtree.tostring)
disp(getBuilding(newtree,floorMatrix,building,floor).tostring)

%subTree requires the original tree and floorMatrix generated by buildTree,
%it also requires a building, an optional 4th argument floor
function newtree = getBuilding(varargin)
    %get variable inputs
    building = varargin{3};
    floorMatrix = varargin{2};
    newtree = varargin{1};
    
    currentBuilding = 0;
    currentBuildingpointer = 0;
    isbuilding = 0;
    for i = 1:length(floorMatrix(:,1))
        if ~(floorMatrix(i,1) == 0)
            if (newtree.get(floorMatrix(i,1)) == building)
               currentBuilding = newtree.get(floorMatrix(i,1));
               currentBuildingpointer = i;
               isbuilding = 1;
               break
            end
        end
    end
        
    levdistance = zeros(1,length(floorMatrix(:,1)));
    if ~isbuilding
            for i = 1:length(floorMatrix(:,1))
               string2 = newtree.get(floorMatrix(i,1))
               levdistance(i) = EditDistance(building,string2 )

            end
        [~,k] = min(levdistance);
        newtree = newtree.subtree(floorMatrix(k,1));
    end
        
    isfloor = 0;
    if (length(varargin) == 4)
        for i = 1:length(floorMatrix(currentBuildingpointer,:))
            if newtree.get(floorMatrix(currentBuildingpointer,i)) == num2str(varargin{4})   
                newtree = newtree.subtree(floorMatrix(currentBuildingpointer,i));
                isfloor = 1;
                break
            end
        end
    end
    
    if ~isfloor
        %Add error handling
    end
        
end

function [newtree, floorMatrix] = buildTree(importedData,t)

    %Create tree
    %Initialize floor index matrix (first column in building index, the rest of the
    %row are the available floor indicies)
    floors = zeros(100,100);
    for i = 1:length(importedData)
       B = split(importedData(i),"&quot;");

       %Building Name (String)
       building = split(B(end-1),"|");
       building = strtrim(building(1));

       currentbuilding = 0;
       isnewbuilding = 1;
       for j = 1:length(floors(:,1))
           if ~(floors(j,1) == 0)
            if (t.get(floors(j,1)) == building)
                isnewbuilding = 0;
                currentbuilding = j;
                break
            end
           end
       end

       if isnewbuilding
        [t, newbuilding] = t.addnode(1,building);
        currentbuilding = sum(~(floors(:,1) == 0)) + 1;
        floors(currentbuilding,1) = newbuilding;
       end

       %Room Number (Str)
       namechar = convertStringsToChars(B(4));
       bldgchar = convertStringsToChars(building);   
       roomnumber = strtrim(convertCharsToStrings(namechar(length(bldgchar)+1:end)));

       %Floor (Int)
       floor = convertStringsToChars(roomnumber);
       floor = floor(isstrprop(convertStringsToChars(roomnumber),'digit'));
       floor = floor(1);

       currentfloor = 0;
       isnewfloor = 1;
       for j = 2:length(floors(currentbuilding,:))
           if ~(floors(currentbuilding,j) == 0)
               if (t.get(floors(currentbuilding,j)) == floor)
                   currentfloor = j;
                   isnewfloor = 0;
                   break
               end
           end
       end

       if isnewfloor
          %add floor node
          [t, newfloor] = t.addnode(floors(currentbuilding,1),floor);
          %add new floor index to matrix
          currentfloor = sum(~(floors(currentbuilding,:) == 0)) + 1;
          floors(currentbuilding,currentfloor) = newfloor;
       end

       %Insert room node
       t = t.addnode(floors(currentbuilding,currentfloor),roomnumber);

       %URL Parameter (String)
       %urlparam = replace(B(end-1)," ", "+");
       %t = t.addnode(floors(currentbuilding,currentfloor),urlparam);
    end

    %trim floor matrix
    floorMatrix = floors;
    newtree = t;
end

function sendRequest

end

function headers = buildHeaders(term,classroom)
    url = ["/ro/Public/SOC/Results/ClassroomDetail?term=",term,"&classroom=",classroom];
    
    
    
    %Encoding Header
    encoding = matlab.net.http.field.GenericField;
    encoding.Name = 'Accept-Encoding';
    encoding.Value = 'gzip, deflate, br';
    
    %Language Header
    lang = matlab.net.http.field.GenericField;
    lang.Value = 'en-US,en;q=0.5';
    lang.Name = 'Accept-Language';
    
    %Host Header
    host = matlab.net.http.field.HostField;
    host.Value = "sa.ucla.edu";
    
    %Connection Header
    connection = matlab.net.http.field.ConnectionField;
    connection.Value = 'keep-alive';
    
    %Builds method header
    method = matlab.net.http.RequestLine;
    method.Method = 'GET';
    method.ProtocolVersion = 'HTTP/1.1';
end