clear
clc

building = "BOELTER";
floor = 7;


%Read the data
importedData = readlines('GridSearch.txt');

[newtree,floorMatrix] = buildTree(importedData);
disp(getBuilding(newtree,floorMatrix,building,floor).tostring)

%subTree requires the original tree and floorMatrix generated by buildTree,
%it also requires a building, an optional 4th argument floor
function newtree = getBuilding(varargin)
    %get variable inputs
    building = upper(varargin(1));
    floorMatrix = varargin(2);
    
    currentBuilding = 0;
    currentBuildingpointer = 0;
    isbuilding = 0;
    for i = 1:length(floorMatrix(:,1))
        if (newtree.get(floorMatrix(i,1)) == building)
           currentBuilding = newtree.get(floorMatrix(i,1));
           currentBuildingpointer = i;
           isbuilding = 1;
           break
        end
    end
        
    levdistance = zeros(1,length(floorMatrix(:,1)));
    if ~isbuliding
        for i = 1:length(floorMatrix(:,1))
           levdistance(i) = EditDistance(building,newtree.get(floorMatrix(i,1))); 
        end
        
    end
    
    newtree = newtree.subtree(currentBuilding);
    
    isfloor = 0;
    if (length(varargin) == 4)
        for i = 1:length(floorMatrix(currentBuildingpointer,:))
            if newtree.get(floorMatrix(currentBuildingpointer,i) == varargin(4)
                newtree = newtree.subtree(floorMatrix(currentBuildingpointer,i));
                isfloor = 1;
                break
            end
        end
    end
    
    if ~isfloor
        %Add error handling
    end
        
end

function [tree, floorMatrix] = buildTree(importedData)

    %Create tree
    t = tree('Classrooms');

    %Initialize floor index matrix (first column in building index, the rest of the
    %row are the available floor indicies)
    floors = zeros(100,100);
    for i = 1:length(importedData)
       B = split(importedData(i),"&quot;");

       %Building Name (String)
       building = split(B(end-1),"|");
       building = strtrim(building(1));

       currentbuilding = 0;
       isnewbuilding = 1;
       for j = 1:length(floors(:,1))
           if ~(floors(j,1) == 0)
            if (t.get(floors(j,1)) == building)
                isnewbuilding = 0;
                currentbuilding = j;
                break
            end
           end
       end

       if isnewbuilding
        [t, newbuilding] = t.addnode(1,building);
        currentbuilding = sum(~(floors(:,1) == 0)) + 1;
        floors(currentbuilding,1) = newbuilding;
       end

       %Room Number (Str)
       namechar = convertStringsToChars(B(4));
       bldgchar = convertStringsToChars(building);   
       roomnumber = strtrim(convertCharsToStrings(namechar(length(bldgchar)+1:end)));

       %Floor (Int)
       floor = convertStringsToChars(roomnumber);
       floor = floor(isstrprop(convertStringsToChars(roomnumber),'digit'));
       floor = floor(1);

       currentfloor = 0;
       isnewfloor = 1;
       for j = 2:length(floors(currentbuilding,:))
           if ~(floors(currentbuilding,j) == 0)
               if (t.get(floors(currentbuilding,j)) == floor)
                   currentfloor = j;
                   isnewfloor = 0;
                   break
               end
           end
       end

       if isnewfloor
          %add floor node
          [t, newfloor] = t.addnode(floors(currentbuilding,1),floor);
          %add new floor index to matrix
          currentfloor = sum(~(floors(currentbuilding,:) == 0)) + 1;
          floors(currentbuilding,currentfloor) = newfloor;
       end

       %Insert room node
       t = t.addnode(floors(currentbuilding,currentfloor),roomnumber);

       %URL Parameter (String)
       urlparam = replace(B(end-1)," ", "+");
       t = t.addnode(floors(currentbuilding,currentfloor),urlparam);
    end

    %trim floor matrix
    floorMatrix = floors;
    tree = t;
end

function sendRequest

end

function headers = buildHeaders()
    url = 
end